fileNames <- list.files(path=dataDir full.names=TRUE)
datafiles <- list.files(path=dataDir, full.names=TRUE)
fileNames <- list.files(path=dataDir, full.names=TRUE)
fileHead <- substr(fileNames, 10, 12)
fileMatrix <- cbind(filehead, fileNames)
fileMatrix <- cbind(fileHead, fileNames)
fileMatrix
targetFiles <- fileMatrix[fileMatrix[,1] %in% id, 2]
targetFiles <- fileMatrix[fileMatrix$fileHead %in% id, 2]
targetFiles <- data.frame()
fileMatrix <- cbind(fileHead, fileNames)
targetFiles <- fileMatrix[fileMatrix$fileHead %in% id, 2]
targetFiles <- fileMatrix[fileMatrix[fileHead,] %in% id, 2]
targetFiles <- fileMatrix[fileMatrix[fileHead,] == 10, 2]
targetFiles <- fileMatrix[fileMatrix[,] == 10, 2]
$subset
?subset
targetFiles <- subset[fileMatrix, fileHead %in% id, select = fileNames]
targetFiles <- subset[fileMatrix, fileHead == 23, select = fileNames]
targetFiles <- fileMatrix[fileMatrix[,1] == 10, ]
targetFiles <- fileMatrix[fileMatrix[1,] == 10, ]
targetFiles
fileMatrix <- str(as.data.frame(cbind(fileHead, fileNames)))
targetFiles <- fileMatrix[fileMatrix[,1] == 10, ]
targetFiles <- fileMatrix[fileMatrix[,1] > 0, ]
fileMatrix
fileNames <- list.files(path=dataDir, full.names=TRUE)
fileHead <- substr(fileNames, 10, 12)
fileMatrix <- str(as.data.frame(cbind(fileHead, fileNames)))
summary(fileMatrix)
summary(fileMatrix)
str(fileMatrix)
fileMatrix <- cbind(fileHead, fileNames)
fileMatrix <- as.data.frame(cbind(fileHead, fileNames))
fileMatrix
targetFiles <- fileMatrix[fileMatrix[,1] > 0, ]
targetFiles
targetFiles <- subset[fileMatrix, fileHead == 23, select = fileNames]
targetFiles <- fileMatrix[fileMatrix[,1] == 10, ]
targetFiles
targetFiles <- subset[fileMatrix, fileHead == 23, select = fileNames]
targetFiles
fileMatrix
str(fileMatrix)
sumamry(fileMatrix)
summary(fileMatrix)
length(fileMatrix)
q <- na.omit(fileMatrix[fileMatrix$ID %in% id, fileNames])
q <- as.data.frame(fileMatrix[fileMatrix$ID %in% id, fileNames])
q <- as.data.frame(fileMatrix)
q <- na.omit(fileMatrix[fileMatrix$fileHead %in% id, fileNames])
q <- na.omit(q[q$fileHead %in% id, fileNames])
pollutantdata <- as.data.frame(fileMatrix)
pollutantdata
q <- na.omit(pollutantdata[pollutantdata$fileHead %in% id, fileNames])
fileMatrix <- data.frame(fileHead, fileNames)
fileMatrix
q <- na.omit(fileMatrix[fileMatrix$fileHead %in% id, fileNames])
fileMatrix <- data.frame(fileHead=fileHead, fileNames=fileNames)
fileMatrix
q <- na.omit(fileMatrix[fileMatrix$fileHead %in% id, fileNames])
?rowSums
?set.seed
debug(lm)
lm(y-x)
swirl()
library(swirl)
swirl()
file.rename(mytest.R, mytest2.R)
play()
ls()
create.dir("testdir")
dir.create("testdir")
setwd("testdir")
getwd()
file.create("mytest.R")
list.files()
file.rename(mytest.R, mytest2.R)
file.rename("mytest.R", "mytest2.R")
file.rename("mytest2.R", "mytest.R")
nxt()
file.rename("mytest2.R", "mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
list.files(full.name=TRUE)
file.path("mytest3.R")
dir.create("testdir2/testdir3")
dir.create("testdir2/testdir3", recursive=TRUE)
dir()
dir.delete("mytest2", recursive=TRUE)
dir.remove("mytest2", recursive=TRUE)
unlink("mytest2", recursive=TRUE)
unlink("testdir2", recursive=TRUE)
setwd(old.dir)
dir()
unlink("testdir", recursive=TRUE)
1:20
pi:10
15:1
?`:`
seq(1, 20)
play()
?seq
nxt
nxt()
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=10)
seq(5, 10, length=10)
my_seq <- seq(5, 10, length=10)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(1, along.with=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0, 1, 2), times=10)
play()
?rep
nxt()
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tg <- function(num_vect[1, ], < 1)
tf <- num_vect[1 < 1, ]
tf <- (num_vect[1, ] < 1)
tf <- subset(num_vect[1, ] < 1)
play()
?subset
tf <- subset(num_vect, < 1)
tf <- subset(num_vect, num_vect[1,] < 1)
tf <- subset(num_vect, num_vect[, 1] < 1)
num_vect
tf <- subset(num_vect, num_vect[1] < 1)
tf
nxt
nxt()
tf <- subset(num_vect, num_vect[1] < 1)
tf <- num_vect < 1
tf
tf
play()
id <- c(1, 3, 5)
x <- 1:10
y <- x %in% id
y <- subset(x %in% id)
y <- subset(x, x %in% id)
x <- 1:500
id <- c(1, 3, 5, 499)
y <- subset(x, x %in% id)
nxt()
num_vect >= 6
my_char <- c("my", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Sandyn")
my_name
play()
paste(my_name, sep = " ")
paste(my_name, collapse = " ")
next()
nxt()
paste(my_name, collapse = " ")
pste("Hello", "world", sep = " ")
paste("Hello", "world", sep = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1:1000)
y <- rnorm(1000)
z <- rep(NA, times = 1000)
play()
?rep
nxt()
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
play()
?sample
nxt()
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
INf - Inf
INf() - Inf()
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
play
play()
?c
nxt()
x[c(1, 3, 5)]
x[c(3, 5, 7)]
x[0]
x[3000]
x[-c(2, 10)]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar
| = 2, norf = NA)
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vects <- c(11, 2, NA)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar", "norf")]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attribute(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
play()
?colnames
nxt()
colnames(my_data, cnames)
cnames
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 ++ 7
6 == 7
6 < 7
10 <= 10
5 != 7
(5 != 7) == TRUE
!(5 == 7) == TRUE
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 >8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
head(flags)
dim(flags)
viewinf(flags)
viewinfo(flags)
viewinfo()
class(flags)
class(flags)
cls_lst <- lapply(flags, class)
cls_lst <- lapply(flags, class)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
play()
cls_list
nxt()
sapply(cls_list, class)
cls_vect <- sapply(cls_list, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[11:17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, Sum())
lapply(flag_colors, Sum)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
lapply(flag_colors, mean)
sapply(flag_colors, mean)
flag_shapes <- flags[19:23]
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lappy(unique_vals, function(elem) elem[2])
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, cahracter(1))
vapply(flags, class, character(1))
?tapply
play()
class(flags)
table(flags)
?table
nxt()
table(flags$landmass)
table(flags$animate)
tapply(flags@animate, flags$landmass, mean)
tapply(flags4animate, flags$landmass, mean)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$populations, flags$red, summary)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
head(flags)
dim(flags)
viewinfo(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_lsit)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flags_colors)
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
play()
summary(flags)
nxt()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
get(wd)
getwd()
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
paste(list(set = set, get = get,
setmean = setmean,
getmean = getmean), collapse = " ")
paste(list(set = set, get = get,
setmean = setmean,
getmean = getmean), collapse = " --- ")
m <- x$getmean()
testx <- matrix(1:4, 15:18)
testx <- matrix(nrows = 4, ncols = 4)
?matrix
testx <- matrix(nrow = 4, ncol = 4)
testx
x <- 1:4
y <- 15:18
x = matrix()
x <<- y
xinv <- NULL
x <<- y
xinv <<- NULL
get <- function() x
setInv <- function(inv) xinv <<- inv # set the inversed matrix
getInv <- function() xinv # return the inversed matrix
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
set <- function(y) {
x <<- y
xinv <<- NULL # it also initialises xinv to null
}
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
m <- x$getInv()
?runif
?rnorm
x <- matrix(rnorm(25, 1, 10), 5, 5)
makeCacheMatrix <- function(x = matrix()) {
## 1. Matrix (set then get)
set  <- function(y) {
x <<- y         # scoped to "makeCacheMatrix/set" ("~/set")
xInv <<- NULL   # initialise xInv, ditto scoped
}
get <- function() x   # returns input matrix to x
x
makeCacheMatrix <- function(x = matrix()) {
## 1. Matrix (set then get)
set  <- function(y) {
x <<- y         # scoped to "makeCacheMatrix/set" ("~/set")
xInv <<- NULL   # initialise xInv, ditto scoped
}
get <- function() x   # returns input matrix to x
## 2. Inverse Matrix (setInv then getInv)
xInv <- NULL          # sets up a variable to hold the inverse of x
setInvx <- function(inv) xInv <<- inv # inverse(x) scoped to "~/setInvx"
getInvx <- function() xInv # return inverse(x) to getInv
## Create list of variables to use as: x <- makeCacheMatrix()
##   x$set()/x$get(): set/get matrix
##   x$setInvx()/x$getInvx(): set/get inverse matrix
list(set=set, get=get, setInvx=setInvx, getInvx=getInvx)
}
cacheSolve <- function(x, ...) {
m <- x$getInvx()
if(!is.null(m)) {    # if m NOT NULL then...
message("getting cached data.")
return(m)      # ...get it.
}
data <- x$get()      # if not, we do x$get to get the matrix object
m <- solve(data)     # run solve() on data to invert it
x$setInvx(m)          # we then set it to the object
m
}
m
data
x <- matrix(rnorm(25, 1, 10), 5, 5)
test_x <- makeCacheMatrix(test_x)
?load
library(makeCacheMatrix)
getwd()
setwd("C:/Users/Sandyn.Skudneski/git/assignment2/ProgrammingAssignment2")
getwd()
ls()
list.files()
source("makeCacheMatrix.R")
list.files()
source("cacheSolve.R")
x
testx <- makeCacheMatrix(testx)
testsolve <- cacheSolve(testx)
test$get
testx$get
source("makeCacheMatrix.R")
c
x
m <- makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
q <- makeCacheMatrix(testx)
x <- matrix(rnorm(25, 1, 10), 5, 5)
q <- makeCacheMatrix(x)
x <- matrix(rnorm(25, 1, 10), 5, 5)
source("makeCacheMatrix"")
source("makeCacheMatrix")
getwd()
list.files()
source"makeCacheMatrix.R"
source("makeCacheMatrix.R")
source("makeCacheMatrix.R")
x <- matrix(rnorm(25, 1, 10), 5, 5)
q <- makeCacheMatrix(x)
cacheSolve(q)
cacheSolve(q)
